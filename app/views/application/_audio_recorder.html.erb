        <% #TODO clean this up %>
        <button onclick="startRecording(this);">record</button>
        <button onclick="stopRecording(this);" disabled>stop</button>

        <h5>Recordings: </h5>
        <ul id="recordingslist"></ul>

        <h5>Recorder Status: </h5>
        <pre id="log"></pre>

        <script>
          function __log(e, data) {
            log.innerHTML += "\n" + e + " " + (data || '');
          }

          var audio_context;
          var recorder;

          function startUserMedia(stream) {
            var input = audio_context.createMediaStreamSource(stream);
        // __log('Media stream created.');

        // Uncomment if you want the audio to feedback directly
        //input.connect(audio_context.destination);
        //__log('Input connected to audio context destination.');
        
        recorder = new Recorder(input, {workerPath: "/recorderWorker.js"});
        __log('Click the record button to start.');
      }

      function startRecording(button) {
        recorder && recorder.record();
        button.disabled = true;
        button.nextElementSibling.disabled = false;
        __log('Recording...');
      }

      function stopRecording(button) {
        recorder && recorder.stop();
        button.disabled = true;
        button.previousElementSibling.disabled = false;
        __log('Stopped recording.');
        
        // create WAV download link using audio data blob
        createDownloadLink();
        
        recorder.clear();
      }

      function createDownloadLink() {
        recorder && recorder.exportWAV(function(blob) {
          var data = new FormData();
          data.append("blob", blob);
          $.ajax("/save_recording", {
            type: "POST",
            data: data,
            processData: false,
            contentType: false
          });
          var url = URL.createObjectURL(blob);
          var li = document.createElement('li');
          var au = document.createElement('audio');
          var hf = document.createElement('a');
          
          au.controls = true;
          au.src = url;
          hf.href = url;
          hf.download = new Date().toISOString() + '.wav';
          hf.innerHTML = hf.download;
          li.appendChild(au);
          li.appendChild(hf);
          recordingslist.appendChild(li);
        });
      }

      function init() {
        console.log("init'd");
        try {
          // webkit shim
          window.AudioContext = window.AudioContext || window.webkitAudioContext;
          navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
          window.URL = window.URL || window.webkitURL;
          
          audio_context = new AudioContext;
          // __log('Audio context set up.');
          // __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
        } catch (e) {
          alert('You must allow this program to use your microphone to use the record audio feature. Click allow by the nav bar to enable.' );
        }
        
        navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
          // __log('No live audio input: ' + e);
        });
      };
    </script>