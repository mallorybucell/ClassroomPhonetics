<div class="container">
<ul class="breadcrumb">
  <li><a href="#">Select Task</a></li>
  <li class="active">Choose Audio</li>
</ul>
<h2>Add audio to your exercise</h3>

<p>In this exercise, the student will: <%= Exercise.task_hash[@_current_exercise.exercise_code] %>. </p>

<h3>Find audio using Forvo</h3>
<div id="forvo-audio-params">
<%= form_tag get_from_forvo_path do %>
<%= label_tag :word, "Enter a word: " %>
<%= text_field_tag :word, nil, :required => true %>
<br>
<%= label_tag :limit, "Choose the number of pronunciations to return: " %>
<% numbers = (1..10).to_a %>
<%= select_tag :limit, options_for_select(numbers, selected: nil) %>
<br>
<button>Get Options from Forvo</button>
<% end %>
</div>

<h3>Use Audio from the Database</h3>


<h3>Record your own audio</h3>
<% #TODO clean this up %>
  <button onclick="startRecording(this);">record</button>
  <button onclick="stopRecording(this);" disabled>stop</button>
  
  <h2>Recordings</h2>
  <ul id="recordingslist"></ul>
  
<!--   <h2>Log</h2>
  <pre id="log"></pre> -->


<!--   // function __log(e, data) {
  //   log.innerHTML += "\n" + e + " " + (data || '');
  // } -->
<script>
  var audio_context;
  var recorder;

  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    // __log('Media stream created.');

    // Uncomment if you want the audio to feedback directly
    //input.connect(audio_context.destination);
    //__log('Input connected to audio context destination.');
    
    recorder = new Recorder(input, {workerPath: "/recorderWorker.js"});
    // __log('Recorder initialised.');
  }

  function startRecording(button) {
    recorder && recorder.record();
    button.disabled = true;
    button.nextElementSibling.disabled = false;
    // __log('Recording...');
  }

  function stopRecording(button) {
    recorder && recorder.stop();
    button.disabled = true;
    button.previousElementSibling.disabled = false;
    // __log('Stopped recording.');
    
    // create WAV download link using audio data blob
    createDownloadLink();
    
    recorder.clear();
  }

  function createDownloadLink() {
    recorder && recorder.exportWAV(function(blob) {
      var data = new FormData();
      data.append("blob", blob);
      $.ajax("/save_recording", {
        type: "POST",
        data: data,
        processData: false,
        contentType: false
      });
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var hf = document.createElement('a');
      
      au.controls = true;
      au.src = url;
      hf.href = url;
      hf.download = new Date().toISOString() + '.wav';
      hf.innerHTML = hf.download;
      li.appendChild(au);
      li.appendChild(hf);
      recordingslist.appendChild(li);
    });
  }

  window.onload = function init() {
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      window.URL = window.URL || window.webkitURL;
      
      audio_context = new AudioContext;
      __log('Audio context set up.');
      __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }
    
    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      // __log('No live audio input: ' + e);
    });
  };
  </script>
</div>
